// Code generated by github.com/inigolabs/fezzik, DO NOT EDIT.

package {{ .PackageName }}

import (
    subscription "github.com/hasura/go-graphql-client"
{{- range $key, $value := .Imports }}
	"{{ $value }}"
{{- end }}
)

type SubscriptionClient interface {
{{- range $operation := .Operations }}
{{- if eq $operation.OperationType "subscription" }}
// {{$operation.Name}} from {{ $operation.Source }}
{{- if len $operation.Inputs }}
	{{ $operation.Name }}(
	{{- range $val := $operation.Inputs }}
		{{ camel $val.Name }} {{ $val.Type}},
	{{- end }}
	fn func(out *{{ $operation.Name }}Response, err error) error) (string, error)
{{- else }}
	{{ $operation.Name }}(fn func(out *{{ $operation.Name }}Response, err error) error) (string, error)
{{- end }}
{{ end }}
{{- end }}
    Close() (err error)
}

func NewSubscriptionClient(url string, params map[string]interface{}) SubscriptionClient {
	gql := subscription.NewSubscriptionClient(url)
	gql.WithConnectionParams(params)

	go gql.Run()

	return &gqlSubscriptionClient{gql: gql}
}

type gqlSubscriptionClient struct {
	gql *subscription.SubscriptionClient
}

func (c *gqlSubscriptionClient) Close() (err error) {
    return c.gql.Close()
}