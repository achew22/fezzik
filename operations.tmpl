package {{ .PackageName }}

import (
	"context"

	"github.com/rs/zerolog/log"
	"github.com/machinebox/graphql"
	"github.com/mitchellh/mapstructure"
)

{{- range $operation := .Operations }}

var {{ $operation.Name }}Operation string = `
{{ $operation.Operation }}
`

{{ if len $operation.InputVarNames }}
type {{ $operation.Name }}InputArgs struct {
{{ $operation.Inputs }}
}
{{ end }}

type {{ $operation.Name }}Response struct {
{{ $operation.ResponseType }}
}

{{ if len $operation.InputVarNames }}
func (c *Client) {{ $operation.Name }}(ctx context.Context, input *{{ $operation.Name }}InputArgs) (
	*{{ $operation.Name }}Response, error) {
{{ else }}
func (c *Client) {{ $operation.Name }}(ctx context.Context) (*{{ $operation.Name }}Response, error) {
{{ end }}

	q := graphql.NewRequest({{ $operation.Name }}Operation)
	{{- range $varname := $operation.InputVarNames }}
	q.Var("{{ $varname }}", input.{{ capitalize $varname }})
	{{- end}}
	var resp map[string]interface{}
	err := c.gql.Run(ctx, q, &resp)
	log.Debug().Interface("resp", resp).Err(err).Msg("{{ $operation.Name }}")
	if err != nil {
		return nil, err
	}

	output := {{ $operation.Name }}Response{}
	err = mapstructure.Decode(resp, &output)
	log.Debug().Interface("output", output).Err(err).Msg("{{ $operation.Name }}")
	if err != nil {
		return nil, err
	}
	return &output, err
}

{{- end }}
