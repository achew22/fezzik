// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	basic "github.com/inigolabs/fezzik/examples/basic/gen/basic"
	mock "github.com/stretchr/testify/mock"
)

// SubscriptionClient is an autogenerated mock type for the SubscriptionClient type
type SubscriptionClient struct {
	mock.Mock
}

// Changed provides a mock function with given fields: input, fn
func (_m *SubscriptionClient) Changed(input *string, fn func(*basic.ChangedResponse, error) error) (string, error) {
	ret := _m.Called(input, fn)

	var r0 string
	if rf, ok := ret.Get(0).(func(*string, func(*basic.ChangedResponse, error) error) string); ok {
		r0 = rf(input, fn)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*string, func(*basic.ChangedResponse, error) error) error); ok {
		r1 = rf(input, fn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *SubscriptionClient) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Updated provides a mock function with given fields: fn
func (_m *SubscriptionClient) Updated(fn func(*basic.UpdatedResponse, error) error) (string, error) {
	ret := _m.Called(fn)

	var r0 string
	if rf, ok := ret.Get(0).(func(func(*basic.UpdatedResponse, error) error) string); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(func(*basic.UpdatedResponse, error) error) error); ok {
		r1 = rf(fn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
