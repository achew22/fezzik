// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	github "github.com/inigolabs/fezzik/examples/github/gen/github"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// ClosePullRequest provides a mock function with given fields: ctx, input
func (_m *Client) ClosePullRequest(ctx context.Context, input github.ClosePullRequestInput) (*github.ClosePullRequestResponse, error) {
	ret := _m.Called(ctx, input)

	var r0 *github.ClosePullRequestResponse
	if rf, ok := ret.Get(0).(func(context.Context, github.ClosePullRequestInput) *github.ClosePullRequestResponse); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.ClosePullRequestResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, github.ClosePullRequestInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentPullRequest provides a mock function with given fields: ctx, input
func (_m *Client) CommentPullRequest(ctx context.Context, input github.AddCommentInput) (*github.CommentPullRequestResponse, error) {
	ret := _m.Called(ctx, input)

	var r0 *github.CommentPullRequestResponse
	if rf, ok := ret.Get(0).(func(context.Context, github.AddCommentInput) *github.CommentPullRequestResponse); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.CommentPullRequestResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, github.AddCommentInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePullRequest provides a mock function with given fields: ctx, input
func (_m *Client) CreatePullRequest(ctx context.Context, input github.CreatePullRequestInput) (*github.CreatePullRequestResponse, error) {
	ret := _m.Called(ctx, input)

	var r0 *github.CreatePullRequestResponse
	if rf, ok := ret.Get(0).(func(context.Context, github.CreatePullRequestInput) *github.CreatePullRequestResponse); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.CreatePullRequestResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, github.CreatePullRequestInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInfo provides a mock function with given fields: ctx, repoOwner, repoName
func (_m *Client) GetInfo(ctx context.Context, repoOwner string, repoName string) (*github.GetInfoResponse, error) {
	ret := _m.Called(ctx, repoOwner, repoName)

	var r0 *github.GetInfoResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.GetInfoResponse); ok {
		r0 = rf(ctx, repoOwner, repoName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.GetInfoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, repoOwner, repoName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MergePullRequest provides a mock function with given fields: ctx, input
func (_m *Client) MergePullRequest(ctx context.Context, input github.MergePullRequestInput) (*github.MergePullRequestResponse, error) {
	ret := _m.Called(ctx, input)

	var r0 *github.MergePullRequestResponse
	if rf, ok := ret.Get(0).(func(context.Context, github.MergePullRequestInput) *github.MergePullRequestResponse); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.MergePullRequestResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, github.MergePullRequestInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePullRequest provides a mock function with given fields: ctx, input
func (_m *Client) UpdatePullRequest(ctx context.Context, input github.UpdatePullRequestInput) (*github.UpdatePullRequestResponse, error) {
	ret := _m.Called(ctx, input)

	var r0 *github.UpdatePullRequestResponse
	if rf, ok := ret.Get(0).(func(context.Context, github.UpdatePullRequestInput) *github.UpdatePullRequestResponse); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.UpdatePullRequestResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, github.UpdatePullRequestInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
