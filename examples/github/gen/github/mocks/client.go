// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	fezzik "github.com/inigolabs/fezzik"
	github "github.com/inigolabs/fezzik/examples/github/gen/github"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// ClosePullRequest provides a mock function with given fields: ctx, input
func (_m *Client) ClosePullRequest(ctx context.Context, input *github.ClosePullRequestInputArgs) (*github.ClosePullRequestResponse, *fezzik.GQLErrors, error) {
	ret := _m.Called(ctx, input)

	var r0 *github.ClosePullRequestResponse
	if rf, ok := ret.Get(0).(func(context.Context, *github.ClosePullRequestInputArgs) *github.ClosePullRequestResponse); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.ClosePullRequestResponse)
		}
	}

	var r1 *fezzik.GQLErrors
	if rf, ok := ret.Get(1).(func(context.Context, *github.ClosePullRequestInputArgs) *fezzik.GQLErrors); ok {
		r1 = rf(ctx, input)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*fezzik.GQLErrors)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *github.ClosePullRequestInputArgs) error); ok {
		r2 = rf(ctx, input)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CommentPullRequest provides a mock function with given fields: ctx, input
func (_m *Client) CommentPullRequest(ctx context.Context, input *github.CommentPullRequestInputArgs) (*github.CommentPullRequestResponse, *fezzik.GQLErrors, error) {
	ret := _m.Called(ctx, input)

	var r0 *github.CommentPullRequestResponse
	if rf, ok := ret.Get(0).(func(context.Context, *github.CommentPullRequestInputArgs) *github.CommentPullRequestResponse); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.CommentPullRequestResponse)
		}
	}

	var r1 *fezzik.GQLErrors
	if rf, ok := ret.Get(1).(func(context.Context, *github.CommentPullRequestInputArgs) *fezzik.GQLErrors); ok {
		r1 = rf(ctx, input)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*fezzik.GQLErrors)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *github.CommentPullRequestInputArgs) error); ok {
		r2 = rf(ctx, input)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreatePullRequest provides a mock function with given fields: ctx, input
func (_m *Client) CreatePullRequest(ctx context.Context, input *github.CreatePullRequestInputArgs) (*github.CreatePullRequestResponse, *fezzik.GQLErrors, error) {
	ret := _m.Called(ctx, input)

	var r0 *github.CreatePullRequestResponse
	if rf, ok := ret.Get(0).(func(context.Context, *github.CreatePullRequestInputArgs) *github.CreatePullRequestResponse); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.CreatePullRequestResponse)
		}
	}

	var r1 *fezzik.GQLErrors
	if rf, ok := ret.Get(1).(func(context.Context, *github.CreatePullRequestInputArgs) *fezzik.GQLErrors); ok {
		r1 = rf(ctx, input)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*fezzik.GQLErrors)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *github.CreatePullRequestInputArgs) error); ok {
		r2 = rf(ctx, input)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInfo provides a mock function with given fields: ctx, input
func (_m *Client) GetInfo(ctx context.Context, input *github.GetInfoInputArgs) (*github.GetInfoResponse, *fezzik.GQLErrors, error) {
	ret := _m.Called(ctx, input)

	var r0 *github.GetInfoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *github.GetInfoInputArgs) *github.GetInfoResponse); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.GetInfoResponse)
		}
	}

	var r1 *fezzik.GQLErrors
	if rf, ok := ret.Get(1).(func(context.Context, *github.GetInfoInputArgs) *fezzik.GQLErrors); ok {
		r1 = rf(ctx, input)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*fezzik.GQLErrors)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *github.GetInfoInputArgs) error); ok {
		r2 = rf(ctx, input)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MergePullRequest provides a mock function with given fields: ctx, input
func (_m *Client) MergePullRequest(ctx context.Context, input *github.MergePullRequestInputArgs) (*github.MergePullRequestResponse, *fezzik.GQLErrors, error) {
	ret := _m.Called(ctx, input)

	var r0 *github.MergePullRequestResponse
	if rf, ok := ret.Get(0).(func(context.Context, *github.MergePullRequestInputArgs) *github.MergePullRequestResponse); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.MergePullRequestResponse)
		}
	}

	var r1 *fezzik.GQLErrors
	if rf, ok := ret.Get(1).(func(context.Context, *github.MergePullRequestInputArgs) *fezzik.GQLErrors); ok {
		r1 = rf(ctx, input)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*fezzik.GQLErrors)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *github.MergePullRequestInputArgs) error); ok {
		r2 = rf(ctx, input)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdatePullRequest provides a mock function with given fields: ctx, input
func (_m *Client) UpdatePullRequest(ctx context.Context, input *github.UpdatePullRequestInputArgs) (*github.UpdatePullRequestResponse, *fezzik.GQLErrors, error) {
	ret := _m.Called(ctx, input)

	var r0 *github.UpdatePullRequestResponse
	if rf, ok := ret.Get(0).(func(context.Context, *github.UpdatePullRequestInputArgs) *github.UpdatePullRequestResponse); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.UpdatePullRequestResponse)
		}
	}

	var r1 *fezzik.GQLErrors
	if rf, ok := ret.Get(1).(func(context.Context, *github.UpdatePullRequestInputArgs) *fezzik.GQLErrors); ok {
		r1 = rf(ctx, input)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*fezzik.GQLErrors)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *github.UpdatePullRequestInputArgs) error); ok {
		r2 = rf(ctx, input)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
